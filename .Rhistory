}
# Call funny_function_wrapper()
expanded_data_feederEffect <- funny_function_wrapper()
# Combine the feed and feeder data
data_feederEffect <- left_join(data_feed, expanded_data_feederEffect)
rm(funny_function_wrapper)
str(data_feederEffect)
# Minor modifications on the final dataset
data_feederEffect <- data_feederEffect %>%
# Remove NAs
drop_na() %>%
# Make factor
mutate(treatment = as.factor(treatment),
tank = as.factor(tank),
feeder = as.factor(feeder))
data_feederEffect
# Calculate the group means
data_groupMeans <- data_feedAccess %>%
# Group the observations
group_by(date, time, treatment) %>%
# Calculate the arithmetic mean of the feed intake in gram per fish, date, time and treatment
summarise(groupMean = mean(feed_perFish_g))
# Create a modeling dataset
data_model <- left_join(data_feedAccess,
data_groupMeans)
# Data Wrangling
data_model <- data_model %>%
# Remove unnecessary columns containing raw data
select(date, time, treatment, tank, accessSum, feed_perFish_g, groupMean) %>%
# Calculate the relative deviation from the group mean
mutate(relDev_groupMean = (feed_perFish_g - groupMean) / groupMean * 100)
# Calculate the group means
data_groupMeans <- data_feederEffect %>%
# Group the observations
group_by(date, time, treatment, feeder) %>%
# Calculate the arithmetic mean of the feed intake in gram per fish, date,
# time, treatment and feeder
summarise(groupMean = mean(feed_perFish_g))
# Create a modeling dataset
data_model <- left_join(data_feederEffect,
data_groupMeans)
# Data wrangling
data_model <- data_model %>%
# Remove unnecessary columns containing raw data
#  select(date, time, treatment, tank, accessSum, feed_perFish_g, groupMean) %>%
# Calculate the relative deviation from the group mean
mutate(relDev_groupMean = (feed_perFish_g - groupMean) / groupMean * 100)
data_groupMeans <- data_feederEffect %>%
# Group the observations
group_by(date, time, treatment, feeder)
data_groupMeans <- data_feederEffect %>%
# Group the observations
group_by(date, time, treatment, feeder) %>%
# Calculate the arithmetic mean of the feed intake in gram per fish, date,
# time, treatment and feeder
summarise(groupMean = mean(feed_perFish_g))
data_groupMeans <- data_feederEffect %>%
# Group the observations
group_by(date, time, treatment, feeder) %>%
# Calculate the arithmetic mean of the feed intake in gram per fish, date,
# time, treatment and feeder
dplyr::summarise(groupMean = mean(feed_perFish_g))
str(feederEffect)
str(datafeederEffect)
str(data_feederEffect)
#
#  TITLE: Data Wrangling - Feeder Effect Dataset
#
#  DESCRIPTION:
#
#
#
# written by: Anil Axel Tellbuescher
#
# first written: November 22th, 2021
# last modified: November 28th, 2021
#
#
#
###############################################################################
# Read in data
data_feed <- read.xls('data/processed/Adlibitum_Feedlist_tilapia_Emulsifiers_cropped.xlsx',
sheet = 'longtable')
data_feed <- data.frame(data_feed,
treatment = rep(1:6,
each = nrow(data_feed)/6),
tank = rep(c(2,11,13,1,8,14,5,9,15,6,12,17,4,10,18,3,7,16),
each = nrow(data_feed)/18)
) %>%
# Calculate the feed that each fish ate per day based on feed intake and number
# of fish per tank
mutate(date = as.Date(date),
feed_perFish_g = feed_intake_g / nr_fish)
###############################################################################
data_feederEffect <- read.xls('data/raw/Tilapia_Emulsifiers_OctNov2021_Side-Experiments.xlsx',
sheet = 'feeder_effect')
colnames(data_feederEffect) <- c('date', 'time', 'feeder', 'tank')
data_feederEffect <- data_feederEffect %>%
# Split the 'tank' column into a 'start' and a 'stop' column for creating a
# sequence of numbers eventually
separate(tank, into = c('start', 'stop'), sep = '-') %>%
# Make the new columns numeric
mutate(start = as.numeric(start),
stop = as.numeric(stop))
# The following code is wrapped in a function to see whether it works or not.
#
# the 'data_feederEffect' dataset is predefined as default
funny_function_wrapper <- function(x = data_feederEffect) {
# Create a data frame to hold the final data
expanded_data <- data.frame()
for (each_row in 1:nrow(x)) {
# Calculate the number of repetitions of each value in a row based on the
# 'start' and 'stop' columns
number_of_reps <- (x$stop[each_row] + 1) - x$start[each_row]
# Create a temporary data frame where the results of row expansion are stored
temp_data <- data.frame(
# Repeat date
date = rep(x$date[each_row], times = number_of_reps),
# Repeat time
time = rep(x$time[each_row], times = number_of_reps),
# Repeat feeder
feeder = rep(x$feeder[each_row], times = number_of_reps),
# Create a sequence with tank numbers based on the 'start' and 'stop' columns
tank = seq(x$start[each_row], x$stop[each_row], by = 1)
)
# Combine the total with the temporary data
expanded_data <-
rbind(expanded_data, temp_data)
}
# Return the total dataset
return(expanded_data)
}
# Call funny_function_wrapper()
expanded_data_feederEffect <- funny_function_wrapper()
# Combine the feed and feeder data
data_feederEffect <- left_join(data_feed, expanded_data_feederEffect)
# Minor modifications on the final dataset
data_feederEffect <- data_feederEffect %>%
# Remove NAs
drop_na() %>%
# Make factor
mutate(treatment = as.factor(treatment),
tank = as.factor(tank),
feeder = as.factor(feeder))
# Remove everything unnecessary
rm(funny_function_wrapper)
data_feederEffect <- read.xls('data/raw/Tilapia_Emulsifiers_OctNov2021_Side-Experiments.xlsx',
sheet = 'feeder_effect')
colnames(data_feederEffect) <- c('date', 'time', 'feeder', 'tank')
data_feederEffect <- data_feederEffect %>%
# Split the 'tank' column into a 'start' and a 'stop' column for creating a
# sequence of numbers eventually
separate(tank, into = c('start', 'stop'), sep = '-') %>%
# Make the new columns numeric
mutate(start = as.numeric(start),
stop = as.numeric(stop),
date = as.Date())
#
#  TITLE: Data Wrangling - Feeder Effect Dataset
#
#  DESCRIPTION:
#
#
#
# written by: Anil Axel Tellbuescher
#
# first written: November 22th, 2021
# last modified: November 28th, 2021
#
#
#
###############################################################################
# Read in data
data_feed <- read.xls('data/processed/Adlibitum_Feedlist_tilapia_Emulsifiers_cropped.xlsx',
sheet = 'longtable')
data_feed <- data.frame(data_feed,
treatment = rep(1:6,
each = nrow(data_feed)/6),
tank = rep(c(2,11,13,1,8,14,5,9,15,6,12,17,4,10,18,3,7,16),
each = nrow(data_feed)/18)
) %>%
# Calculate the feed that each fish ate per day based on feed intake and number
# of fish per tank
mutate(date = as.Date(date),
feed_perFish_g = feed_intake_g / nr_fish)
###############################################################################
data_feederEffect <- read.xls('data/raw/Tilapia_Emulsifiers_OctNov2021_Side-Experiments.xlsx',
sheet = 'feeder_effect')
colnames(data_feederEffect) <- c('date', 'time', 'feeder', 'tank')
data_feederEffect <- data_feederEffect %>%
# Split the 'tank' column into a 'start' and a 'stop' column for creating a
# sequence of numbers eventually
separate(tank, into = c('start', 'stop'), sep = '-') %>%
# Make the new columns numeric
mutate(start = as.numeric(start),
stop = as.numeric(stop),
date = as.Date(date))
# The following code is wrapped in a function to see whether it works or not.
#
# the 'data_feederEffect' dataset is predefined as default
funny_function_wrapper <- function(x = data_feederEffect) {
# Create a data frame to hold the final data
expanded_data <- data.frame()
for (each_row in 1:nrow(x)) {
# Calculate the number of repetitions of each value in a row based on the
# 'start' and 'stop' columns
number_of_reps <- (x$stop[each_row] + 1) - x$start[each_row]
# Create a temporary data frame where the results of row expansion are stored
temp_data <- data.frame(
# Repeat date
date = rep(x$date[each_row], times = number_of_reps),
# Repeat time
time = rep(x$time[each_row], times = number_of_reps),
# Repeat feeder
feeder = rep(x$feeder[each_row], times = number_of_reps),
# Create a sequence with tank numbers based on the 'start' and 'stop' columns
tank = seq(x$start[each_row], x$stop[each_row], by = 1)
)
# Combine the total with the temporary data
expanded_data <-
rbind(expanded_data, temp_data)
}
# Return the total dataset
return(expanded_data)
}
# Call funny_function_wrapper()
expanded_data_feederEffect <- funny_function_wrapper()
# Combine the feed and feeder data
data_feederEffect <- left_join(data_feed, expanded_data_feederEffect)
# Minor modifications on the final dataset
data_feederEffect <- data_feederEffect %>%
# Remove NAs
drop_na() %>%
# Make factor
mutate(treatment = as.factor(treatment),
tank = as.factor(tank),
feeder = as.factor(feeder))
# Remove everything unnecessary
rm(funny_function_wrapper)
data_groupMeans <- data_feederEffect %>%
# Group the observations
group_by(date, time, treatment, feeder) %>%
# Calculate the arithmetic mean of the feed intake in gram per fish, date,
# time, treatment and feeder
dplyr::summarise(groupMean = mean(feed_perFish_g))
data_groupMeans
data_groupMeans <- data_feederEffect %>%
# Group the observations
group_by(date, time, treatment, tank, feeder) %>%
# Calculate the arithmetic mean of the feed intake in gram per fish, date,
# time, treatment and feeder
dplyr::summarise(groupMean = mean(feed_perFish_g))
data_groupMeans <- data_feederEffect %>%
# Group the observations
group_by(date, time, treatment, tank, feeder) %>%
# Calculate the arithmetic mean of the feed intake in gram per fish, date,
# time, treatment and feeder
dplyr::summarise(groupMean = mean(feed_perFish_g)) %>%
print()
# Calculate the group means
data_groupMeans <- data_feederEffect %>%
# Group the observations
group_by(date, time, treatment, tank, feeder) %>%
# Calculate the arithmetic mean of the feed intake in gram per fish, date,
# time, treatment and feeder
dplyr::summarise(groupMean = mean(feed_perFish_g)) %>%
print()
# Create a modeling dataset
data_model <- left_join(data_feederEffect,
data_groupMeans)
# Data wrangling
data_model <- data_model %>%
drop_na() %>%
# Remove unnecessary columns containing raw data
#  select(date, time, treatment, tank, accessSum, feed_perFish_g, groupMean) %>%
# Calculate the relative deviation from the group mean
mutate(relDev_groupMean = (feed_perFish_g - groupMean) / groupMean * 100)
head(data_model)
# Calculate the group means
data_groupMeans <- data_feederEffect %>%
# Group the observations
group_by(date, time, treatment, feeder) %>%
# Calculate the arithmetic mean of the feed intake in gram per fish, date,
# time, treatment and feeder
dplyr::summarise(groupMean = mean(feed_perFish_g)) %>%
print()
# Create a modeling dataset
data_model <- left_join(data_feederEffect,
data_groupMeans)
# Data wrangling
data_model <- data_model %>%
drop_na() %>%
# Remove unnecessary columns containing raw data
#  select(date, time, treatment, tank, accessSum, feed_perFish_g, groupMean) %>%
# Calculate the relative deviation from the group mean
mutate(relDev_groupMean = (feed_perFish_g - groupMean) / groupMean * 100)
head(data_model)
# Calculate the group means
data_groupMeans <- data_feederEffect %>%
# Group the observations
group_by(date, time, treatment, feeder) %>%
# Calculate the arithmetic mean of the feed intake in gram per fish, date,
# time, treatment and feeder
dplyr::summarise(groupMean = mean(feed_perFish_g)) %>%
print()
# Create a modeling dataset
data_model <- left_join(data_feederEffect,
data_groupMeans)
# Data wrangling
data_model <- data_model %>%
drop_na() %>%
# Remove unnecessary columns containing raw data
#  select(date, time, treatment, tank, accessSum, feed_perFish_g, groupMean) %>%
# Calculate the relative deviation from the group mean
mutate(relDev_groupMean = (feed_perFish_g - groupMean) / groupMean * 100) %>%
print()
data_groupMeans <- data_feederEffect %>%
# Group the observations
group_by(treatment, date, time, feeder) %>%
# Calculate the arithmetic mean of the feed intake in gram per fish, date,
# time, treatment and feeder
dplyr::summarise(groupMean = mean(feed_perFish_g)) %>%
print()
data_groupMeans <- data_feederEffect %>%
# Group the observations
group_by(feeder, treatment, date, time) %>%
# Calculate the arithmetic mean of the feed intake in gram per fish, date,
# time, treatment and feeder
dplyr::summarise(groupMean = mean(feed_perFish_g)) %>%
print()
data_groupMeans <- data_feederEffect %>%
# Group the observations
group_by(feeder, date, treatment, time) %>%
# Calculate the arithmetic mean of the feed intake in gram per fish, date,
# time, treatment and feeder
dplyr::summarise(groupMean = mean(feed_perFish_g)) %>%
print()
head(data_feederEffect)
data_groupMeans <- data_feederEffect %>%
# Group the observations
group_by(feeder, date, time) %>%
# Calculate the arithmetic mean of the feed intake in gram per fish, date,
# time, treatment and feeder
dplyr::summarise(groupMean = mean(feed_perFish_g)) %>%
print()
# Create a modeling dataset
data_model <- left_join(data_feederEffect,
data_groupMeans)
# Data wrangling
data_model <- data_model %>%
drop_na() %>%
# Remove unnecessary columns containing raw data
#  select(date, time, treatment, tank, accessSum, feed_perFish_g, groupMean) %>%
# Calculate the relative deviation from the group mean
mutate(relDev_groupMean = (feed_perFish_g - groupMean) / groupMean * 100) %>%
print()
data_model %>%
ggplot(aes(x = date, y = relDev_groupMean)) +
geom_point()
data_model %>%
filter(relDev_groupMean < 200)
data_model %>%
filter(relDev_groupMean > 200)
data_model %>%
filter(relDev_groupMean < 200 |relDev_groupMean == 0)
data_model %>%
filter(relDev_groupMean < 200 |relDev_groupMean == 0) %>%
ggplot(aes(x = date, y = relDev_groupMean)) +
geom_point()
data_model %>%
filter(relDev_groupMean < 200 | feed_perFish_g == 0) %>%
ggplot(aes(x = date, y = relDev_groupMean)) +
geom_point()
data_model %>%
filter(relDev_groupMean < 200 | feed_perFish_g != 0) %>%
ggplot(aes(x = date, y = relDev_groupMean)) +
geom_point()
data_model %>%
filter(relDev_groupMean < 200) %>%
ggplot(aes(x = date, y = relDev_groupMean)) +
geom_point()
data_model %>%
filter(relDev_groupMean < 200 & relDev_groupMean != -100) %>%
ggplot(aes(x = date, y = relDev_groupMean)) +
geom_point()
data_model %>%
filter(relDev_groupMean < 200 & feed_perFish_g != 0) %>%
ggplot(aes(x = date, y = relDev_groupMean)) +
geom_point()
data_model %>%
filter(relDev_groupMean < 200 & feed_perFish_g != 0) %>%
ggplot(aes(x = date, y = relDev_groupMean)) +
geom_point() +
geom_abline(intercept = 0)
?geom_abline
data_model %>%
filter(relDev_groupMean < 200 & feed_perFish_g != 0) %>%
ggplot(aes(x = date, y = relDev_groupMean)) +
geom_point() +
geom_hline(intercept = 0)
data_model %>%
filter(relDev_groupMean < 200 & feed_perFish_g != 0) %>%
ggplot(aes(x = date, y = relDev_groupMean)) +
geom_point() +
geom_hline(yintercept = 0)
data_model %>%
filter(relDev_groupMean < 200 & feed_perFish_g != 0) %>%
ggplot(aes(x = date, y = relDev_groupMean)) +
geom_point() +
geom_hline(yintercept = 0, colour = red)
data_model %>%
filter(relDev_groupMean < 200 & feed_perFish_g != 0) %>%
ggplot(aes(x = date, y = relDev_groupMean)) +
geom_point() +
geom_hline(yintercept = 0, colour = 'red')
data_model %>%
filter(relDev_groupMean < 200 & feed_perFish_g != 0) %>%
ggplot(aes(x = date, y = relDev_groupMean, colour = feeder)) +
geom_point() +
geom_hline(yintercept = 0, colour = 'red')
summary(data_model$feeder)
data_model %>%
filter(relDev_groupMean < 200 & feed_perFish_g != 0 & feeder != Marit & feeder != Satya) %>%
ggplot(aes(x = date, y = relDev_groupMean, colour = feeder)) +
geom_point() +
geom_hline(yintercept = 0, colour = 'red')
data_model %>%
filter(relDev_groupMean < 200 & feed_perFish_g != 0 & feeder != Marit & feeder != Satya) %>%
droplevels() %>%
ggplot(aes(x = date, y = relDev_groupMean, colour = feeder)) +
geom_point() +
geom_hline(yintercept = 0, colour = 'red')
data_model %>%
filter(relDev_groupMean < 200 & feed_perFish_g != 0 & feeder != Marit & feeder != Satya) %>%
droplevels()
data_model %>%
filter(relDev_groupMean < 200 & feed_perFish_g != 0 & feeder != 'Marit' & feeder != 'Satya') %>%
droplevels() %>%
ggplot(aes(x = date, y = relDev_groupMean, colour = feeder)) +
geom_point() +
geom_hline(yintercept = 0, colour = 'red')
lm(relDev_groupMean ~ date, data = data_model)
lm(relDev_groupMean ~ date + feeder, data = data_model)
model <- lm(relDev_groupMean ~ date, data = data_model)
summary(model)
model <- lm(relDev_groupMean ~ date + feeder, data = data_model)
summary(model)
# Calculate the group means
data_groupMeans <- data_feederEffect %>%
# Group the observations
group_by(feeder, date, time) %>%
# Calculate the arithmetic mean of the feed intake in gram per fish, date,
# time, treatment and feeder
dplyr::summarise(groupMean = mean(feed_perFish_g)) %>%
print()
# Create a modeling dataset
data_model <- left_join(data_feederEffect,
data_groupMeans)
# Data wrangling
data_model <- data_model %>%
drop_na() %>%
# Remove unnecessary columns containing raw data
#  select(date, time, treatment, tank, accessSum, feed_perFish_g, groupMean) %>%
# Calculate the relative deviation from the group mean
mutate(relDev_groupMean = (feed_perFish_g - groupMean) / groupMean * 100) %>%
# Remove certain observations
filter(relDev_groupMean < 200 & feed_perFish_g != 0 & feeder != 'Marit' & feeder != 'Satya') %>%
droplevels() %>%
print()
# Plot data
data_model  %>%
ggplot(aes(x = date, y = relDev_groupMean, colour = feeder)) +
geom_point() +
geom_hline(yintercept = 0, colour = 'red')
# Linear model
model <- lm(relDev_groupMean ~ date + feeder, data = data_model)
summary(model)
anova(model)
data_model  %>%
ggplot(aes(x = date, y = feed_perFish_g)) +
geom_point()
data_model  %>%
ggplot(aes(x = date, y = feed_perFish_g, colour = treatment)) +
geom_point()
data_model  %>%
ggplot(aes(x = date, y = feed_perFish_g, colour = treatment)) +
geom_point() + geom_smooth()
data_model  %>%
ggplot(aes(x = date, y = feed_perFish_g, colour = treatment)) +
geom_point() + geom_smooth(method = 'lm')
data_model  %>%
ggplot(aes(x = date, y = feed_perFish_g, colour = feeder)) +
geom_point() + geom_smooth(method = 'lm')
# Plot data
data_model  %>%
ggplot(aes(x = date, y = relDev_groupMean, colour = feeder)) +
geom_point() +
geom_hline(yintercept = 0, colour = 'red') +
labs(title = 'Effect of feeding person on the relative feed intake',
x = 'Date',
y = 'rel. Deviation from treatment mean')
# Plot data
data_model  %>%
ggplot(aes(x = date, y = relDev_groupMean, colour = feeder)) +
geom_point() +
geom_hline(yintercept = 0, colour = 'red') +
labs(title = 'Effect of feeding person on the relative feed intake',
x = 'Date',
y = 'rel. Deviation from treatment mean',
colour = 'Feeding Person')
install.packages('statisticalModeling')
install.packages('roxygen2')
